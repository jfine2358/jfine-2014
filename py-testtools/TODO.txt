todo Use a**b for raising exceptions.
done Allow a == b == c == d.
todo Allow a(b, c, d) is True.
done Store tests in external file.
todo Create test suite.
todo Raise exception for unprocessed code in test file.

done 0.5 Create body/expr transformer
done store compiled expression
todo Produce demonstration test runner
done refactor Transformer so function is parameter
done store compiled expressions in place
todo test as we go along

todo implement log._compare etc
todo provide the mytest.run(log, obj)
todo architecture - divide into components
todo use try_eval, with suitable return values
todo no need to pass globals() - make property of log
todo can store code in globals (or log)

todo move code objects to top of 'module'
todo use literal_eval?
todo ast.parse(..., mode='eval')
todo avoid premature optimisation

todo tracebacks for test failure
todo acknowledgements
todo eat own dog food
